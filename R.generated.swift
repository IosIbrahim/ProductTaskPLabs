//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 21 colors.
  struct color {
    /// Color `app-background`.
    static let appBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-background")
    /// Color `app-black`.
    static let appBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-black")
    /// Color `app-blue-light`.
    static let appBlueLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-blue-light")
    /// Color `app-blue`.
    static let appBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-blue")
    /// Color `app-docs`.
    static let appDocs = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-docs")
    /// Color `app-evaluation`.
    static let appEvaluation = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-evaluation")
    /// Color `app-fail`.
    static let appFail = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-fail")
    /// Color `app-gray`.
    static let appGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-gray")
    /// Color `app-line`.
    static let appLine = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-line")
    /// Color `app-main`.
    static let appMain = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-main")
    /// Color `app-notifications`.
    static let appNotifications = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-notifications")
    /// Color `app-resign`.
    static let appResign = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-resign")
    /// Color `app-return`.
    static let appReturn = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-return")
    /// Color `app-roster`.
    static let appRoster = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-roster")
    /// Color `app-salary`.
    static let appSalary = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-salary")
    /// Color `app-shadow`.
    static let appShadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-shadow")
    /// Color `app-sick`.
    static let appSick = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-sick")
    /// Color `app-success`.
    static let appSuccess = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-success")
    /// Color `app-vacation`.
    static let appVacation = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-vacation")
    /// Color `app-withdrawlResign`.
    static let appWithdrawlResign = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-withdrawlResign")
    /// Color `app-yellow`.
    static let appYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "app-yellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-blue-light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlueLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlueLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-docs", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appDocs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appDocs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-evaluation", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appEvaluation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appEvaluation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-fail", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appFail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appFail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-line", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-main", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appMain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-notifications", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appNotifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appNotifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-resign", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appResign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appResign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-return", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appReturn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appReturn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-roster", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appRoster(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appRoster, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-salary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appSalary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appSalary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-sick", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appSick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appSick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-success", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-vacation", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appVacation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appVacation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-withdrawlResign", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appWithdrawlResign(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appWithdrawlResign, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app-yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-blue-light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appBlueLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appBlueLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-docs", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appDocs(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appDocs.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-evaluation", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appEvaluation(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appEvaluation.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-fail", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appFail(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appFail.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-line", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appLine(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appLine.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-main", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appMain(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appMain.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-notifications", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appNotifications(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appNotifications.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-resign", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appResign(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appResign.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-return", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appReturn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appReturn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-roster", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appRoster(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appRoster.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-salary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appSalary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appSalary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-shadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appShadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appShadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-sick", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appSick(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appSick.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-success", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appSuccess(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appSuccess.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-vacation", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appVacation(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appVacation.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-withdrawlResign", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appWithdrawlResign(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appWithdrawlResign.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app-yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appYellow.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Nunito-Bold.ttf`.
    static let nunitoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Bold", pathExtension: "ttf")
    /// Resource file `Nunito-Regular.ttf`.
    static let nunitoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Regular", pathExtension: "ttf")
    /// Resource file `Nunito-SemiBold.ttf`.
    static let nunitoSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-SemiBold", pathExtension: "ttf")
    /// Resource file `Tajawal-Bold.ttf`.
    static let tajawalBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Tajawal-Bold", pathExtension: "ttf")
    /// Resource file `Tajawal-Medium.ttf`.
    static let tajawalMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Tajawal-Medium", pathExtension: "ttf")
    /// Resource file `Tajawal-Regular.ttf`.
    static let tajawalRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Tajawal-Regular", pathExtension: "ttf")
    /// Resource file `guide.pdf`.
    static let guidePdf = Rswift.FileResource(bundle: R.hostingBundle, name: "guide", pathExtension: "pdf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Bold", withExtension: "ttf")`
    static func nunitoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Regular", withExtension: "ttf")`
    static func nunitoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-SemiBold", withExtension: "ttf")`
    static func nunitoSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Tajawal-Bold", withExtension: "ttf")`
    static func tajawalBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tajawalBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Tajawal-Medium", withExtension: "ttf")`
    static func tajawalMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tajawalMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Tajawal-Regular", withExtension: "ttf")`
    static func tajawalRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tajawalRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide", withExtension: "pdf")`
    static func guidePdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guidePdf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `Nunito-Bold`.
    static let nunitoBold = Rswift.FontResource(fontName: "Nunito-Bold")
    /// Font `Nunito-Regular`.
    static let nunitoRegular = Rswift.FontResource(fontName: "Nunito-Regular")
    /// Font `Nunito-SemiBold`.
    static let nunitoSemiBold = Rswift.FontResource(fontName: "Nunito-SemiBold")
    /// Font `Tajawal-Bold`.
    static let tajawalBold = Rswift.FontResource(fontName: "Tajawal-Bold")
    /// Font `Tajawal-Medium`.
    static let tajawalMedium = Rswift.FontResource(fontName: "Tajawal-Medium")
    /// Font `Tajawal-Regular`.
    static let tajawalRegular = Rswift.FontResource(fontName: "Tajawal-Regular")

    /// `UIFont(name: "Nunito-Bold", size: ...)`
    static func nunitoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBold, size: size)
    }

    /// `UIFont(name: "Nunito-Regular", size: ...)`
    static func nunitoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoRegular, size: size)
    }

    /// `UIFont(name: "Nunito-SemiBold", size: ...)`
    static func nunitoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoSemiBold, size: size)
    }

    /// `UIFont(name: "Tajawal-Bold", size: ...)`
    static func tajawalBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: tajawalBold, size: size)
    }

    /// `UIFont(name: "Tajawal-Medium", size: ...)`
    static func tajawalMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: tajawalMedium, size: size)
    }

    /// `UIFont(name: "Tajawal-Regular", size: ...)`
    static func tajawalRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: tajawalRegular, size: size)
    }

    static func validate() throws {
      if R.font.nunitoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Bold' could not be loaded, is 'Nunito-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Regular' could not be loaded, is 'Nunito-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-SemiBold' could not be loaded, is 'Nunito-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.tajawalBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Tajawal-Bold' could not be loaded, is 'Tajawal-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.tajawalMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Tajawal-Medium' could not be loaded, is 'Tajawal-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.tajawalRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Tajawal-Regular' could not be loaded, is 'Tajawal-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `ic-arrow-down`.
    static let icArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-arrow-down")
    /// Image `ic-backW`.
    static let icBackW = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-backW")
    /// Image `ic-back`.
    static let icBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-back")
    /// Image `ic-close`.
    static let icClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-close")
    /// Image `ic-down`.
    static let icDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-down")
    /// Image `ic-emptyStar`.
    static let icEmptyStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-emptyStar")
    /// Image `ic-filledStar`.
    static let icFilledStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-filledStar")
    /// Image `ic-filter`.
    static let icFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-filter")
    /// Image `ic-goBlack`.
    static let icGoBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-goBlack")
    /// Image `ic-go`.
    static let icGo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-go")
    /// Image `ic-task`.
    static let icTask = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-task")
    /// Image `picture-placeholder`.
    static let picturePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "picture-placeholder")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-arrow-down", bundle: ..., traitCollection: ...)`
    static func icArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icArrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-back", bundle: ..., traitCollection: ...)`
    static func icBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-backW", bundle: ..., traitCollection: ...)`
    static func icBackW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBackW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-close", bundle: ..., traitCollection: ...)`
    static func icClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-down", bundle: ..., traitCollection: ...)`
    static func icDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-emptyStar", bundle: ..., traitCollection: ...)`
    static func icEmptyStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEmptyStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-filledStar", bundle: ..., traitCollection: ...)`
    static func icFilledStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFilledStar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-filter", bundle: ..., traitCollection: ...)`
    static func icFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFilter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-go", bundle: ..., traitCollection: ...)`
    static func icGo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icGo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-goBlack", bundle: ..., traitCollection: ...)`
    static func icGoBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icGoBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-task", bundle: ..., traitCollection: ...)`
    static func icTask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icTask, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "picture-placeholder", bundle: ..., traitCollection: ...)`
    static func picturePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.picturePlaceholder, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `FilterCell`.
    static let filterCell = _R.nib._FilterCell()
    /// Nib `ProductCell`.
    static let productCell = _R.nib._ProductCell()
    /// Nib `ProductsController`.
    static let productsController = _R.nib._ProductsController()
    /// Nib `SplashController`.
    static let splashController = _R.nib._SplashController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterCell) instead")
    static func filterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCell) instead")
    static func productCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductsController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productsController) instead")
    static func productsController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productsController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashController) instead")
    static func splashController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashController)
    }
    #endif

    static func filterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterCell? {
      return R.nib.filterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterCell
    }

    static func productCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
      return R.nib.productCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
    }

    static func productsController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.productsController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func splashController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 3 localization keys.
    struct infoPlist {
      /// en translation: In order to choose profile image.
      ///
      /// Locales: ar, en
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: In order to choose profile image.
      ///
      /// Locales: ar, en
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Task
      ///
      /// Locales: ar, en
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)

      /// en translation: In order to choose profile image.
      ///
      /// Locales: ar, en
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: In order to choose profile image.
      ///
      /// Locales: ar, en
      static func nsPhotoLibraryUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSPhotoLibraryUsageDescription"
        }

        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: Task
      ///
      /// Locales: ar, en
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 115 localization keys.
    struct localizable {
      /// en translation: About us
      ///
      /// Locales: ar, en
      static let aboutUs = Rswift.StringResource(key: "about.us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Add Vacation Report
      ///
      /// Locales: ar, en
      static let vacationReport = Rswift.StringResource(key: "vacation.report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: All
      ///
      /// Locales: ar, en
      static let all = Rswift.StringResource(key: "all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Allowanes
      ///
      /// Locales: ar, en
      static let allowanes = Rswift.StringResource(key: "allowanes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: ar, en
      static let amount = Rswift.StringResource(key: "amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Answered Of
      ///
      /// Locales: ar, en
      static let answered = Rswift.StringResource(key: "answered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Apply
      ///
      /// Locales: ar, en
      static let apply = Rswift.StringResource(key: "apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Appraisal
      ///
      /// Locales: ar, en
      static let appraisal = Rswift.StringResource(key: "appraisal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Are you sure you want to cancel this request?
      ///
      /// Locales: ar, en
      static let cancelRequestHint = Rswift.StringResource(key: "cancel.request.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Attachments
      ///
      /// Locales: ar, en
      static let photoLibrary = Rswift.StringResource(key: "photo.library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: ar, en
      static let back = Rswift.StringResource(key: "back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Balance (EGP)
      ///
      /// Locales: ar, en
      static let balance = Rswift.StringResource(key: "balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Branch Name
      ///
      /// Locales: ar, en
      static let branchName = Rswift.StringResource(key: "branch.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: COLLEAGUE EVALUATION
      ///
      /// Locales: ar, en
      static let colleagueEvaluation = Rswift.StringResource(key: "colleague.evaluation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: ar, en
      static let camera = Rswift.StringResource(key: "camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: ar, en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Cancel request
      ///
      /// Locales: ar, en
      static let cancelRequest = Rswift.StringResource(key: "cancel.request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Choose 
      ///
      /// Locales: ar, en
      static let choose = Rswift.StringResource(key: "choose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Choose Date
      ///
      /// Locales: ar, en
      static let chooseDate = Rswift.StringResource(key: "choose.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: ar, en
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Contact administrator to restore your account
      ///
      /// Locales: ar, en
      static let blockedAccountHint = Rswift.StringResource(key: "blocked.account.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Create new request
      ///
      /// Locales: ar, en
      static let createNewRequest = Rswift.StringResource(key: "create.new.request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Create request
      ///
      /// Locales: ar, en
      static let createReqeust = Rswift.StringResource(key: "create.reqeust", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Cross Salary
      ///
      /// Locales: ar, en
      static let crossSalary = Rswift.StringResource(key: "cross.salary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: DIRECT HEAD EVALUATION 
      ///
      /// Locales: ar, en
      static let directHeadEvaluation = Rswift.StringResource(key: "direct.head.evaluation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Date Of Discharge
      ///
      /// Locales: ar, en
      static let dateOfDischarge = Rswift.StringResource(key: "date.of.discharge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Deducations
      ///
      /// Locales: ar, en
      static let deducations = Rswift.StringResource(key: "deducations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: ar, en
      static let discount = Rswift.StringResource(key: "discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: ar, en
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Douments
      ///
      /// Locales: ar, en
      static let docs = Rswift.StringResource(key: "docs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: EGY
      ///
      /// Locales: ar, en
      static let pound = Rswift.StringResource(key: "pound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: End Date
      ///
      /// Locales: ar, en
      static let endDate = Rswift.StringResource(key: "end.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: End Service Date
      ///
      /// Locales: ar, en
      static let endServiceDate = Rswift.StringResource(key: "end.service.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: ar, en
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Enter 
      ///
      /// Locales: ar, en
      static let enter = Rswift.StringResource(key: "enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Enter Password
      ///
      /// Locales: ar, en
      static let enterPassword = Rswift.StringResource(key: "enter.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Enter UserName
      ///
      /// Locales: ar, en
      static let enterUserName = Rswift.StringResource(key: "enter.user.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Enter mPIN to confirm
      ///
      /// Locales: ar, en
      static let enterMpinConfirm = Rswift.StringResource(key: "enter.mpin.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Enter phone number
      ///
      /// Locales: ar, en
      static let enterPhone = Rswift.StringResource(key: "enter.phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Evaluation Name
      ///
      /// Locales: ar, en
      static let evaluationName = Rswift.StringResource(key: "evaluation.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Evaluation Type
      ///
      /// Locales: ar, en
      static let evaluationType = Rswift.StringResource(key: "evaluation.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Expired session
      ///
      /// Locales: ar, en
      static let expiredSession = Rswift.StringResource(key: "expired.session", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Failed
      ///
      /// Locales: ar, en
      static let failed = Rswift.StringResource(key: "failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: From
      ///
      /// Locales: ar, en
      static let from = Rswift.StringResource(key: "from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: From Date
      ///
      /// Locales: ar, en
      static let fromDate = Rswift.StringResource(key: "from.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Group
      ///
      /// Locales: ar, en
      static let group = Rswift.StringResource(key: "group", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Help & Support
      ///
      /// Locales: ar, en
      static let helpSupoort = Rswift.StringResource(key: "help.supoort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: ar, en
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Hospital
      ///
      /// Locales: ar, en
      static let hospital = Rswift.StringResource(key: "hospital", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Leave Resumption
      ///
      /// Locales: ar, en
      static let leaveResumption = Rswift.StringResource(key: "leave.resumption", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: ar, en
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Log out from your account?
      ///
      /// Locales: ar, en
      static let logoutMessage = Rswift.StringResource(key: "logout.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: ar, en
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Mark all as read
      ///
      /// Locales: ar, en
      static let markAlll = Rswift.StringResource(key: "mark.alll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Month
      ///
      /// Locales: ar, en
      static let month = Rswift.StringResource(key: "month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: ar, en
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: No
      ///
      /// Locales: ar, en
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: No Data Found!
      ///
      /// Locales: ar, en
      static let noData = Rswift.StringResource(key: "no.data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: No Internet Connection!
      ///
      /// Locales: ar, en
      static let noInternet = Rswift.StringResource(key: "no.internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Notes
      ///
      /// Locales: ar, en
      static let notes = Rswift.StringResource(key: "notes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Notifcations
      ///
      /// Locales: ar, en
      static let notifications = Rswift.StringResource(key: "notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: ar, en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: PERSONAL EVALUATION
      ///
      /// Locales: ar, en
      static let personalEvaluation = Rswift.StringResource(key: "personal.evaluation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: ar, en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Password is too short
      ///
      /// Locales: ar, en
      static let shortPassword = Rswift.StringResource(key: "short.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Payment request has been sent!
      ///
      /// Locales: ar, en
      static let paymetRequestSent = Rswift.StringResource(key: "paymet.request.sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Payroll
      ///
      /// Locales: ar, en
      static let payroll = Rswift.StringResource(key: "payroll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Permissions
      ///
      /// Locales: ar, en
      static let permission = Rswift.StringResource(key: "permission", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Phone number
      ///
      /// Locales: ar, en
      static let mobile = Rswift.StringResource(key: "mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Previous
      ///
      /// Locales: ar, en
      static let previous = Rswift.StringResource(key: "previous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: ar, en
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Rate
      ///
      /// Locales: ar, en
      static let rate = Rswift.StringResource(key: "rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Rate by
      ///
      /// Locales: ar, en
      static let ratedBy = Rswift.StringResource(key: "rated.by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Reason
      ///
      /// Locales: ar, en
      static let reason = Rswift.StringResource(key: "reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Reest Language
      ///
      /// Locales: ar, en
      static let resetLanguage = Rswift.StringResource(key: "reset.language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Request Status
      ///
      /// Locales: ar, en
      static let requestStatus = Rswift.StringResource(key: "request.status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Request Vacation
      ///
      /// Locales: ar, en
      static let requestVacation = Rswift.StringResource(key: "request.vacation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Request type
      ///
      /// Locales: ar, en
      static let requestType = Rswift.StringResource(key: "request.type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Reset
      ///
      /// Locales: ar, en
      static let reset = Rswift.StringResource(key: "reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Resignation
      ///
      /// Locales: ar, en
      static let resignation = Rswift.StringResource(key: "resignation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Resignation Date
      ///
      /// Locales: ar, en
      static let resignationDate = Rswift.StringResource(key: "resignation.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Resignation Number
      ///
      /// Locales: ar, en
      static let resignationNumber = Rswift.StringResource(key: "resignation.number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Resignation Withdraw Date
      ///
      /// Locales: ar, en
      static let resignationWithdrawDate = Rswift.StringResource(key: "resignation.withdraw.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Resignation Withdraw Number
      ///
      /// Locales: ar, en
      static let resignationWithdrawNumber = Rswift.StringResource(key: "resignation.withdraw.number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Roster
      ///
      /// Locales: ar, en
      static let roster = Rswift.StringResource(key: "roster", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Salary Certificates
      ///
      /// Locales: ar, en
      static let salaryCertificates = Rswift.StringResource(key: "salary.certificates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: ar, en
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Save Done
      ///
      /// Locales: ar, en
      static let saveDone = Rswift.StringResource(key: "save.done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: ar, en
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: ar, en
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Sick Leave
      ///
      /// Locales: ar, en
      static let sickLeave = Rswift.StringResource(key: "sick.leave", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Sick Report
      ///
      /// Locales: ar, en
      static let sickReport = Rswift.StringResource(key: "sick.report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Start Date
      ///
      /// Locales: ar, en
      static let startDate = Rswift.StringResource(key: "start.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: ar, en
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Taken Balance
      ///
      /// Locales: ar, en
      static let takenBalance = Rswift.StringResource(key: "taken.balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Terms & Conditions
      ///
      /// Locales: ar, en
      static let terms = Rswift.StringResource(key: "terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: This session has been expired
      ///
      /// Locales: ar, en
      static let expiredSessionHint = Rswift.StringResource(key: "expired.session.hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: This week
      ///
      /// Locales: ar, en
      static let thisWeek = Rswift.StringResource(key: "this.week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: To
      ///
      /// Locales: ar, en
      static let to = Rswift.StringResource(key: "to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: To Date
      ///
      /// Locales: ar, en
      static let toDate = Rswift.StringResource(key: "to.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Total Days
      ///
      /// Locales: ar, en
      static let totalDays = Rswift.StringResource(key: "total.days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Total Salary
      ///
      /// Locales: ar, en
      static let totalSalary = Rswift.StringResource(key: "total.salary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Trans date
      ///
      /// Locales: ar, en
      static let transDate = Rswift.StringResource(key: "trans.date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: UnKnown Error has occured Please try again!
      ///
      /// Locales: ar, en
      static let unknownError = Rswift.StringResource(key: "unknown.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Unread
      ///
      /// Locales: ar, en
      static let unread = Rswift.StringResource(key: "unread", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: User Guide
      ///
      /// Locales: ar, en
      static let userGuide = Rswift.StringResource(key: "user.guide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: ar, en
      static let userName = Rswift.StringResource(key: "user.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Vacation Period
      ///
      /// Locales: ar, en
      static let vacationPeriod = Rswift.StringResource(key: "vacation.period", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Vacations
      ///
      /// Locales: ar, en
      static let vacations = Rswift.StringResource(key: "vacations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: View All
      ///
      /// Locales: ar, en
      static let viewAll = Rswift.StringResource(key: "view.all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Welcome,
      ///
      /// Locales: ar, en
      static let welcome = Rswift.StringResource(key: "welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Withdrawal Resignation
      ///
      /// Locales: ar, en
      static let withdrawalResignation = Rswift.StringResource(key: "withdrawal.resignation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: ar, en
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: Your account has been locked
      ///
      /// Locales: ar, en
      static let blockedAccount = Rswift.StringResource(key: "blocked.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)
      /// en translation: عربي
      ///
      /// Locales: ar, en
      static let lang = Rswift.StringResource(key: "Lang", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ar", "en"], comment: nil)

      /// en translation: About us
      ///
      /// Locales: ar, en
      static func aboutUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about.us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about.us"
        }

        return NSLocalizedString("about.us", bundle: bundle, comment: "")
      }

      /// en translation: Add Vacation Report
      ///
      /// Locales: ar, en
      static func vacationReport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vacation.report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vacation.report"
        }

        return NSLocalizedString("vacation.report", bundle: bundle, comment: "")
      }

      /// en translation: All
      ///
      /// Locales: ar, en
      static func all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "all"
        }

        return NSLocalizedString("all", bundle: bundle, comment: "")
      }

      /// en translation: Allowanes
      ///
      /// Locales: ar, en
      static func allowanes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allowanes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allowanes"
        }

        return NSLocalizedString("allowanes", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: ar, en
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "amount"
        }

        return NSLocalizedString("amount", bundle: bundle, comment: "")
      }

      /// en translation: Answered Of
      ///
      /// Locales: ar, en
      static func answered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("answered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "answered"
        }

        return NSLocalizedString("answered", bundle: bundle, comment: "")
      }

      /// en translation: Apply
      ///
      /// Locales: ar, en
      static func apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apply"
        }

        return NSLocalizedString("apply", bundle: bundle, comment: "")
      }

      /// en translation: Appraisal
      ///
      /// Locales: ar, en
      static func appraisal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appraisal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appraisal"
        }

        return NSLocalizedString("appraisal", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to cancel this request?
      ///
      /// Locales: ar, en
      static func cancelRequestHint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel.request.hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel.request.hint"
        }

        return NSLocalizedString("cancel.request.hint", bundle: bundle, comment: "")
      }

      /// en translation: Attachments
      ///
      /// Locales: ar, en
      static func photoLibrary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("photo.library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "photo.library"
        }

        return NSLocalizedString("photo.library", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: ar, en
      static func back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "back"
        }

        return NSLocalizedString("back", bundle: bundle, comment: "")
      }

      /// en translation: Balance (EGP)
      ///
      /// Locales: ar, en
      static func balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "balance"
        }

        return NSLocalizedString("balance", bundle: bundle, comment: "")
      }

      /// en translation: Branch Name
      ///
      /// Locales: ar, en
      static func branchName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("branch.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "branch.name"
        }

        return NSLocalizedString("branch.name", bundle: bundle, comment: "")
      }

      /// en translation: COLLEAGUE EVALUATION
      ///
      /// Locales: ar, en
      static func colleagueEvaluation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("colleague.evaluation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "colleague.evaluation"
        }

        return NSLocalizedString("colleague.evaluation", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: ar, en
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera"
        }

        return NSLocalizedString("camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: ar, en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel request
      ///
      /// Locales: ar, en
      static func cancelRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel.request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel.request"
        }

        return NSLocalizedString("cancel.request", bundle: bundle, comment: "")
      }

      /// en translation: Choose 
      ///
      /// Locales: ar, en
      static func choose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose"
        }

        return NSLocalizedString("choose", bundle: bundle, comment: "")
      }

      /// en translation: Choose Date
      ///
      /// Locales: ar, en
      static func chooseDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose.date"
        }

        return NSLocalizedString("choose.date", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: ar, en
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm"
        }

        return NSLocalizedString("confirm", bundle: bundle, comment: "")
      }

      /// en translation: Contact administrator to restore your account
      ///
      /// Locales: ar, en
      static func blockedAccountHint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blocked.account.hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blocked.account.hint"
        }

        return NSLocalizedString("blocked.account.hint", bundle: bundle, comment: "")
      }

      /// en translation: Create new request
      ///
      /// Locales: ar, en
      static func createNewRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.new.request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create.new.request"
        }

        return NSLocalizedString("create.new.request", bundle: bundle, comment: "")
      }

      /// en translation: Create request
      ///
      /// Locales: ar, en
      static func createReqeust(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.reqeust", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create.reqeust"
        }

        return NSLocalizedString("create.reqeust", bundle: bundle, comment: "")
      }

      /// en translation: Cross Salary
      ///
      /// Locales: ar, en
      static func crossSalary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cross.salary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cross.salary"
        }

        return NSLocalizedString("cross.salary", bundle: bundle, comment: "")
      }

      /// en translation: DIRECT HEAD EVALUATION 
      ///
      /// Locales: ar, en
      static func directHeadEvaluation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("direct.head.evaluation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "direct.head.evaluation"
        }

        return NSLocalizedString("direct.head.evaluation", bundle: bundle, comment: "")
      }

      /// en translation: Date Of Discharge
      ///
      /// Locales: ar, en
      static func dateOfDischarge(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("date.of.discharge", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "date.of.discharge"
        }

        return NSLocalizedString("date.of.discharge", bundle: bundle, comment: "")
      }

      /// en translation: Deducations
      ///
      /// Locales: ar, en
      static func deducations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deducations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deducations"
        }

        return NSLocalizedString("deducations", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: ar, en
      static func discount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount"
        }

        return NSLocalizedString("discount", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: ar, en
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "done"
        }

        return NSLocalizedString("done", bundle: bundle, comment: "")
      }

      /// en translation: Douments
      ///
      /// Locales: ar, en
      static func docs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("docs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "docs"
        }

        return NSLocalizedString("docs", bundle: bundle, comment: "")
      }

      /// en translation: EGY
      ///
      /// Locales: ar, en
      static func pound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pound", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pound"
        }

        return NSLocalizedString("pound", bundle: bundle, comment: "")
      }

      /// en translation: End Date
      ///
      /// Locales: ar, en
      static func endDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("end.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "end.date"
        }

        return NSLocalizedString("end.date", bundle: bundle, comment: "")
      }

      /// en translation: End Service Date
      ///
      /// Locales: ar, en
      static func endServiceDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("end.service.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "end.service.date"
        }

        return NSLocalizedString("end.service.date", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: ar, en
      static func english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "English"
        }

        return NSLocalizedString("English", bundle: bundle, comment: "")
      }

      /// en translation: Enter 
      ///
      /// Locales: ar, en
      static func enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter"
        }

        return NSLocalizedString("enter", bundle: bundle, comment: "")
      }

      /// en translation: Enter Password
      ///
      /// Locales: ar, en
      static func enterPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter.password"
        }

        return NSLocalizedString("enter.password", bundle: bundle, comment: "")
      }

      /// en translation: Enter UserName
      ///
      /// Locales: ar, en
      static func enterUserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.user.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter.user.name"
        }

        return NSLocalizedString("enter.user.name", bundle: bundle, comment: "")
      }

      /// en translation: Enter mPIN to confirm
      ///
      /// Locales: ar, en
      static func enterMpinConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.mpin.confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter.mpin.confirm"
        }

        return NSLocalizedString("enter.mpin.confirm", bundle: bundle, comment: "")
      }

      /// en translation: Enter phone number
      ///
      /// Locales: ar, en
      static func enterPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter.phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter.phone"
        }

        return NSLocalizedString("enter.phone", bundle: bundle, comment: "")
      }

      /// en translation: Evaluation Name
      ///
      /// Locales: ar, en
      static func evaluationName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("evaluation.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "evaluation.name"
        }

        return NSLocalizedString("evaluation.name", bundle: bundle, comment: "")
      }

      /// en translation: Evaluation Type
      ///
      /// Locales: ar, en
      static func evaluationType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("evaluation.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "evaluation.type"
        }

        return NSLocalizedString("evaluation.type", bundle: bundle, comment: "")
      }

      /// en translation: Expired session
      ///
      /// Locales: ar, en
      static func expiredSession(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expired.session", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expired.session"
        }

        return NSLocalizedString("expired.session", bundle: bundle, comment: "")
      }

      /// en translation: Failed
      ///
      /// Locales: ar, en
      static func failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed"
        }

        return NSLocalizedString("failed", bundle: bundle, comment: "")
      }

      /// en translation: From
      ///
      /// Locales: ar, en
      static func from(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("from", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "from"
        }

        return NSLocalizedString("from", bundle: bundle, comment: "")
      }

      /// en translation: From Date
      ///
      /// Locales: ar, en
      static func fromDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("from.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "from.date"
        }

        return NSLocalizedString("from.date", bundle: bundle, comment: "")
      }

      /// en translation: Group
      ///
      /// Locales: ar, en
      static func group(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "group"
        }

        return NSLocalizedString("group", bundle: bundle, comment: "")
      }

      /// en translation: Help & Support
      ///
      /// Locales: ar, en
      static func helpSupoort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("help.supoort", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "help.supoort"
        }

        return NSLocalizedString("help.supoort", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: ar, en
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      /// en translation: Hospital
      ///
      /// Locales: ar, en
      static func hospital(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hospital", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hospital"
        }

        return NSLocalizedString("hospital", bundle: bundle, comment: "")
      }

      /// en translation: Leave Resumption
      ///
      /// Locales: ar, en
      static func leaveResumption(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leave.resumption", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leave.resumption"
        }

        return NSLocalizedString("leave.resumption", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: ar, en
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", bundle: bundle, comment: "")
      }

      /// en translation: Log out from your account?
      ///
      /// Locales: ar, en
      static func logoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout.message"
        }

        return NSLocalizedString("logout.message", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: ar, en
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, comment: "")
      }

      /// en translation: Mark all as read
      ///
      /// Locales: ar, en
      static func markAlll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mark.alll", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mark.alll"
        }

        return NSLocalizedString("mark.alll", bundle: bundle, comment: "")
      }

      /// en translation: Month
      ///
      /// Locales: ar, en
      static func month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month"
        }

        return NSLocalizedString("month", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: ar, en
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: ar, en
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", bundle: bundle, comment: "")
      }

      /// en translation: No Data Found!
      ///
      /// Locales: ar, en
      static func noData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no.data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no.data"
        }

        return NSLocalizedString("no.data", bundle: bundle, comment: "")
      }

      /// en translation: No Internet Connection!
      ///
      /// Locales: ar, en
      static func noInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no.internet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no.internet"
        }

        return NSLocalizedString("no.internet", bundle: bundle, comment: "")
      }

      /// en translation: Notes
      ///
      /// Locales: ar, en
      static func notes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notes"
        }

        return NSLocalizedString("notes", bundle: bundle, comment: "")
      }

      /// en translation: Notifcations
      ///
      /// Locales: ar, en
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifications"
        }

        return NSLocalizedString("notifications", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: ar, en
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: PERSONAL EVALUATION
      ///
      /// Locales: ar, en
      static func personalEvaluation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("personal.evaluation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "personal.evaluation"
        }

        return NSLocalizedString("personal.evaluation", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: ar, en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// en translation: Password is too short
      ///
      /// Locales: ar, en
      static func shortPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("short.password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "short.password"
        }

        return NSLocalizedString("short.password", bundle: bundle, comment: "")
      }

      /// en translation: Payment request has been sent!
      ///
      /// Locales: ar, en
      static func paymetRequestSent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paymet.request.sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paymet.request.sent"
        }

        return NSLocalizedString("paymet.request.sent", bundle: bundle, comment: "")
      }

      /// en translation: Payroll
      ///
      /// Locales: ar, en
      static func payroll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payroll", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payroll"
        }

        return NSLocalizedString("payroll", bundle: bundle, comment: "")
      }

      /// en translation: Permissions
      ///
      /// Locales: ar, en
      static func permission(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("permission", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "permission"
        }

        return NSLocalizedString("permission", bundle: bundle, comment: "")
      }

      /// en translation: Phone number
      ///
      /// Locales: ar, en
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mobile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mobile"
        }

        return NSLocalizedString("mobile", bundle: bundle, comment: "")
      }

      /// en translation: Previous
      ///
      /// Locales: ar, en
      static func previous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("previous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "previous"
        }

        return NSLocalizedString("previous", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: ar, en
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile"
        }

        return NSLocalizedString("profile", bundle: bundle, comment: "")
      }

      /// en translation: Rate
      ///
      /// Locales: ar, en
      static func rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rate"
        }

        return NSLocalizedString("rate", bundle: bundle, comment: "")
      }

      /// en translation: Rate by
      ///
      /// Locales: ar, en
      static func ratedBy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rated.by", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rated.by"
        }

        return NSLocalizedString("rated.by", bundle: bundle, comment: "")
      }

      /// en translation: Reason
      ///
      /// Locales: ar, en
      static func reason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reason"
        }

        return NSLocalizedString("reason", bundle: bundle, comment: "")
      }

      /// en translation: Reest Language
      ///
      /// Locales: ar, en
      static func resetLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset.language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset.language"
        }

        return NSLocalizedString("reset.language", bundle: bundle, comment: "")
      }

      /// en translation: Request Status
      ///
      /// Locales: ar, en
      static func requestStatus(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request.status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request.status"
        }

        return NSLocalizedString("request.status", bundle: bundle, comment: "")
      }

      /// en translation: Request Vacation
      ///
      /// Locales: ar, en
      static func requestVacation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request.vacation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request.vacation"
        }

        return NSLocalizedString("request.vacation", bundle: bundle, comment: "")
      }

      /// en translation: Request type
      ///
      /// Locales: ar, en
      static func requestType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request.type"
        }

        return NSLocalizedString("request.type", bundle: bundle, comment: "")
      }

      /// en translation: Reset
      ///
      /// Locales: ar, en
      static func reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "reset"
        }

        return NSLocalizedString("reset", bundle: bundle, comment: "")
      }

      /// en translation: Resignation
      ///
      /// Locales: ar, en
      static func resignation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resignation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resignation"
        }

        return NSLocalizedString("resignation", bundle: bundle, comment: "")
      }

      /// en translation: Resignation Date
      ///
      /// Locales: ar, en
      static func resignationDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resignation.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resignation.date"
        }

        return NSLocalizedString("resignation.date", bundle: bundle, comment: "")
      }

      /// en translation: Resignation Number
      ///
      /// Locales: ar, en
      static func resignationNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resignation.number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resignation.number"
        }

        return NSLocalizedString("resignation.number", bundle: bundle, comment: "")
      }

      /// en translation: Resignation Withdraw Date
      ///
      /// Locales: ar, en
      static func resignationWithdrawDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resignation.withdraw.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resignation.withdraw.date"
        }

        return NSLocalizedString("resignation.withdraw.date", bundle: bundle, comment: "")
      }

      /// en translation: Resignation Withdraw Number
      ///
      /// Locales: ar, en
      static func resignationWithdrawNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resignation.withdraw.number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resignation.withdraw.number"
        }

        return NSLocalizedString("resignation.withdraw.number", bundle: bundle, comment: "")
      }

      /// en translation: Roster
      ///
      /// Locales: ar, en
      static func roster(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("roster", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "roster"
        }

        return NSLocalizedString("roster", bundle: bundle, comment: "")
      }

      /// en translation: Salary Certificates
      ///
      /// Locales: ar, en
      static func salaryCertificates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("salary.certificates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "salary.certificates"
        }

        return NSLocalizedString("salary.certificates", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: ar, en
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", bundle: bundle, comment: "")
      }

      /// en translation: Save Done
      ///
      /// Locales: ar, en
      static func saveDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save.done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save.done"
        }

        return NSLocalizedString("save.done", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: ar, en
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: ar, en
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, comment: "")
      }

      /// en translation: Sick Leave
      ///
      /// Locales: ar, en
      static func sickLeave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sick.leave", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sick.leave"
        }

        return NSLocalizedString("sick.leave", bundle: bundle, comment: "")
      }

      /// en translation: Sick Report
      ///
      /// Locales: ar, en
      static func sickReport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sick.report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sick.report"
        }

        return NSLocalizedString("sick.report", bundle: bundle, comment: "")
      }

      /// en translation: Start Date
      ///
      /// Locales: ar, en
      static func startDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start.date"
        }

        return NSLocalizedString("start.date", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: ar, en
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success"
        }

        return NSLocalizedString("success", bundle: bundle, comment: "")
      }

      /// en translation: Taken Balance
      ///
      /// Locales: ar, en
      static func takenBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("taken.balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "taken.balance"
        }

        return NSLocalizedString("taken.balance", bundle: bundle, comment: "")
      }

      /// en translation: Terms & Conditions
      ///
      /// Locales: ar, en
      static func terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms"
        }

        return NSLocalizedString("terms", bundle: bundle, comment: "")
      }

      /// en translation: This session has been expired
      ///
      /// Locales: ar, en
      static func expiredSessionHint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expired.session.hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expired.session.hint"
        }

        return NSLocalizedString("expired.session.hint", bundle: bundle, comment: "")
      }

      /// en translation: This week
      ///
      /// Locales: ar, en
      static func thisWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this.week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this.week"
        }

        return NSLocalizedString("this.week", bundle: bundle, comment: "")
      }

      /// en translation: To
      ///
      /// Locales: ar, en
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to"
        }

        return NSLocalizedString("to", bundle: bundle, comment: "")
      }

      /// en translation: To Date
      ///
      /// Locales: ar, en
      static func toDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to.date"
        }

        return NSLocalizedString("to.date", bundle: bundle, comment: "")
      }

      /// en translation: Total Days
      ///
      /// Locales: ar, en
      static func totalDays(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total.days", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total.days"
        }

        return NSLocalizedString("total.days", bundle: bundle, comment: "")
      }

      /// en translation: Total Salary
      ///
      /// Locales: ar, en
      static func totalSalary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total.salary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total.salary"
        }

        return NSLocalizedString("total.salary", bundle: bundle, comment: "")
      }

      /// en translation: Trans date
      ///
      /// Locales: ar, en
      static func transDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trans.date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "trans.date"
        }

        return NSLocalizedString("trans.date", bundle: bundle, comment: "")
      }

      /// en translation: UnKnown Error has occured Please try again!
      ///
      /// Locales: ar, en
      static func unknownError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknown.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unknown.error"
        }

        return NSLocalizedString("unknown.error", bundle: bundle, comment: "")
      }

      /// en translation: Unread
      ///
      /// Locales: ar, en
      static func unread(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unread", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unread"
        }

        return NSLocalizedString("unread", bundle: bundle, comment: "")
      }

      /// en translation: User Guide
      ///
      /// Locales: ar, en
      static func userGuide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user.guide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user.guide"
        }

        return NSLocalizedString("user.guide", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: ar, en
      static func userName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user.name"
        }

        return NSLocalizedString("user.name", bundle: bundle, comment: "")
      }

      /// en translation: Vacation Period
      ///
      /// Locales: ar, en
      static func vacationPeriod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vacation.period", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vacation.period"
        }

        return NSLocalizedString("vacation.period", bundle: bundle, comment: "")
      }

      /// en translation: Vacations
      ///
      /// Locales: ar, en
      static func vacations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vacations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vacations"
        }

        return NSLocalizedString("vacations", bundle: bundle, comment: "")
      }

      /// en translation: View All
      ///
      /// Locales: ar, en
      static func viewAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view.all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view.all"
        }

        return NSLocalizedString("view.all", bundle: bundle, comment: "")
      }

      /// en translation: Welcome,
      ///
      /// Locales: ar, en
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome"
        }

        return NSLocalizedString("welcome", bundle: bundle, comment: "")
      }

      /// en translation: Withdrawal Resignation
      ///
      /// Locales: ar, en
      static func withdrawalResignation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("withdrawal.resignation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "withdrawal.resignation"
        }

        return NSLocalizedString("withdrawal.resignation", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: ar, en
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yes"
        }

        return NSLocalizedString("yes", bundle: bundle, comment: "")
      }

      /// en translation: Your account has been locked
      ///
      /// Locales: ar, en
      static func blockedAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("blocked.account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "blocked.account"
        }

        return NSLocalizedString("blocked.account", bundle: bundle, comment: "")
      }

      /// en translation: عربي
      ///
      /// Locales: ar, en
      static func lang(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lang", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Lang"
        }

        return NSLocalizedString("Lang", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SplashController.validate()
    }

    struct _FilterCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FilterCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FilterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FilterCell
      }

      fileprivate init() {}
    }

    struct _ProductCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
      }

      fileprivate init() {}
    }

    struct _ProductsController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProductsController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SplashController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-logo-word", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-logo-word' is used in nib 'SplashController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic-splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
